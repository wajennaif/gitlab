{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cspthree\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 //----------------------------------------------------------------------------------------------\
 Studen : 444006715\
Wajen naif \
// Java code for linearly searching x in arr[]. If x\
// is present, then return its location, otherwise\
// return -1.\
\
class LinearSearch \{\
\
    // This function returns the index of element x in arr[]\
    static int search(int arr[], int n, int x) \{\
        for (int i = 0; i < n; i++) \{\
            // Return the index of the element if the element is found\
            if (arr[i] == x) \{\
                return i; // Return 0-based index\
            \}\
        \}\
        // Return -1 if the element is not found\
        return -1;\
    \}\
\
    public static void main(String[] args) \{\
        int[] arr = \{ 3, 4, 1, 7, 5 \}; // Sample array\
        int n = arr.length; // Length of the array\
        int x = 4; // Element to search for\
        int index = search(arr, n, x); // Perform the search\
\
        // Output the result\
        if (index == -1) \{\
            System.out.println("Element is not present in the array");\
        \} else \{\
            System.out.println("Element found at position " + (index + 1)); // 1-based position\
        \}\
    \}\
\}\
\
//------------------------------------------------------------------------------------------------------}